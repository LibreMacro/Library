<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Animations" script:language="StarBasic" script:moduleType="normal">&apos;AnimateFontSize: Creates an animation in which a gradual variation of the font size is performed.
&apos;pSheet: Sheet name (text)
&apos;pRange: Range of cells to generate the effect/formatting (text)
&apos;pSize: Final font size after animation ends
&apos;pSpeed: Speed ​​at which the animation is performed (&quot;fast&quot;, &quot;medium&quot; or &quot;slow&quot;)
Sub AnimateFontSize(pSheet as String, pRange As String, Optional pSize As Integer, Optional pSpeed As String) 

	Dim vInitialSize As Integer
	Dim vFinalSize As Integer
	Dim vTime As Integer
	
	If CheckIfHasSheet(pSheet) Then

		vInitialSize = Cell(pSheet, pRange).CharHeight
		
		if IsMissing(pSize) Then
			vFinalSize = vInitialSize*1.5	
		Else
			vFinalSize = pSize
		end If
		
		if IsMissing(pSpeed) Then
			vSpeed = &quot;medium&quot;
		Else
			vSpeed = pSpeed
		end If
	
	 	If vSpeed = &quot;fast&quot; then
	 		vTime = 0
	 	ElseIf  vSpeed = &quot;medium&quot; Then
	 		vTime = 20
	 	Else 
	 		vTime = 50
	 	End if
		
		vDiff = abs(vFinalSize - vInitialSize) 
		
		If vFinalSize &gt; vInitialSize then
		
			For i= 1 To vDiff Step 1
				
				ChangeFontSize(pSheet, pRange, vInitialSize+i)
				
				wait vTime
			
			Next
			
		Else
		
			For i= 1 To vDiff Step 1
				
				ChangeFontSize(pSheet, pRange, vInitialSize-i)
				
				wait vTime
			
			Next
		
		End If

	End if
		
End Sub

&apos;AnimateFontColor: Creates an animation in which a gradual variation of the font color is performed.
&apos;pSheet: Sheet name (text)
&apos;pRange: Range of cells to generate the effect/formatting (text)
&apos;pColor: Final color at the end of the animation
&apos;pSpeed: Speed ​​at which the animation is performed (&quot;fast&quot;, &quot;medium&quot; or &quot;slow&quot;)
Sub AnimateFontColor(pSheet as String, pRange As String, Optional pColor As String, Optional pSpeed As String) 
 dim colorLong As Long
 Dim vColor As String
 Dim vSpeed As String
 Dim vTime As Integer
 Dim vInc As Integer
 Dim vOperType1 As String
 Dim vOperType2 As String
 Dim vOperType3 As String
 Dim num1 As Integer
 Dim num2 As Integer
 Dim num3 As Integer
 Dim num4 As Integer
 Dim num5 As Integer
 Dim num6 As Integer
 dim cA$(2) 
 Dim cB$(2) 
 
 	If CheckIfHasSheet(pSheet) Then
	 
	 	if IsMissing(pSpeed) Then
			vSpeed = &quot;medium&quot;
		Else
			vSpeed = pSpeed
		end If
		
	 	If vSpeed = &quot;fast&quot; then
	 		vInc = 10
	 		vTime = 0
	 	ElseIf  vSpeed = &quot;medium&quot; Then
	 		vInc = 5
	 		vTime = 5
	 	Else 
	 		vInc = 1
	 		vTime = 10
	 	End if
	 	
	 	if IsMissing(pColor) Then
			vColor = &quot;red&quot;
		Else
			vColor = pColor
		end If
	
	 	colorLong = Cell(pSheet, pRange).CharColor
	 
	 	cA = GetColorCode(  getRGBfromLong( colorLong ) )
	 	cB = GetColorCode( vColor )
	 	
	 	num1 = CInt( cA(0) )
	 	num2 = CInt( cB(0) )
	 	num3 = CInt( cA(1) )
	 	num4 = CInt( cB(1) )
	 	num5 = CInt( cA(2) )
	 	num6 = CInt( cB(2) )
		                         
	 	vOperType1 = getOperType(num1, num2)
	 	
	 	vOperType2 = getOperType(num3, num4)
	 	
	 	vOperType3 = getOperType(num5, num6)
	 	
		Do While (num1 &lt;&gt; num2 or num3 &lt;&gt; num4 or num5 &lt;&gt; num6)
		   
			num1 = NumberTransformation(num1, num2, vOperType1, vInc)
		   		
			num3 = NumberTransformation(num3, num4, vOperType2, vInc)
			
			num5 = NumberTransformation(num5, num6, vOperType3, vInc)
			
			ChangeFontColor(pSheet, pRange,  rgbColor( num1, num3, num5 ) )   
	
			wait vTime
			
		Loop
		
	End if

End Sub

&apos; 
&apos; Ref: https://ask.libreoffice.org/t/macros-please-easy/27618
Sub ChangeFont(pSheet as String, pRange As String, pFont As String)
Dim oText As Object
Dim oCursor As Object

	oText  = Cell(pSheet, pRange).getText()
	oCursor = oText.createTextCursorByRange( Cell(pSheet, pRange) )
	oCursor.CharFontName			= &quot;Ubuntu&quot;

End sub

Sub ToggleCellColor(pSheet as String, pRange As String, Optional pFirstColor As String, Optional pSecondColor As String, Optional pSteps as Integer, Optional pTime As Integer) 

dim numOfSteps as Integer
dim vFirstColor As String
Dim vSecondColor As String

	if IsMissing(pSteps) Then
		numOfSteps = 5	
	else
		numOfSteps = pSteps	
	end If
	
	if IsMissing(pFirstColor) Then
		vFirstColor = &quot;black&quot;	
	Else
		vFirstColor = pFirstColor
	end If
	
	&apos;c = getColorCode

	for i = 1 to numOfSteps step 1
	
		ChangeCellColor(pSheet, pRange, vFirstColor)
		
		wait 1000
		
		ChangeCellColor(pSheet, pRange, vSecondColor)
		
		wait 1000
				
	next

End Sub


</script:module>