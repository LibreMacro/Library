<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="internalFunctions" script:language="StarBasic" script:moduleType="normal">Global vFoundCell as String
Global vFoundRow as Integer

FUNCTION GetColorCode (pColor as String) as Object
dim c$(3)

	if UCase(pColor) = &quot;RED&quot; then
		c(0) = 255
		c(1) = 0
		c(2) = 0
	elseif UCase(pColor) = &quot;BLUE&quot; then
		c(0) = 0
		c(1) = 0
		c(2) = 255	
	elseif UCase(pColor) = &quot;YELLOW&quot; then
		c(0) = 255
		c(1) = 255
		c(2) = 0
	elseif UCase(pColor) = &quot;GREEN&quot; then
		c(0) = 0
		c(1) = 255
		c(2) = 0
	elseif UCase(pColor) = &quot;BLACK&quot; then
		c(0) = 0
		c(1) = 0
		c(2) = 0
		elseif UCase(pColor) = &quot;WHITE&quot; then
		c(0) = 255
		c(1) = 255
		c(2) = 255
	elseif UCase(mid(pColor,1,3)) = &quot;RGB&quot; Then 
	pColor = Replace(pColor, &quot; &quot;, &quot;&quot;)
		b = mid(pColor,5,11)
		b2 =  split(b, &quot;)&quot;,2)
	 	c = split(b2(0), &quot;,&quot;,3)
	 	&apos;c(2) = split( c, &quot;)&quot;, 1)
	end if
	
	GetColorCode = c

END FUNCTION

Function CheckIfHasSheet(pSheet as String) as Boolean
	
	If ThisComponent.Sheets.hasByName(pSheet) Then
		 
			CheckIfHasSheet = True
			
		else
		
			MsgBox(&quot;Warning: there is no spreadsheet named &apos;&quot; &amp; pSheet &amp; &quot;&apos; !&quot; )
			CheckIfHasSheet = False
				
	end if
		
end Function

function GetCellRef(pRef as String) as Object
dim r$(2)

	if UCase(mid(pRef,1,3)) = &quot;REF&quot; then
		b = mid(pRef,5, len(pRef) - 1  ) 
	 	r = split(b, &quot;,&quot;,2)
	end if
	
	r(0) = Cint(r(0)) - 1
	r(1) = Cint(r(1)) - 1
	
	GetCellRef = r

end function

function Ref(pLinha as Integer, pColuna) as String

	Ref = &quot;REF(&quot; &amp; CStr(pLinha) &amp; &quot;,&quot; &amp; CStr(pColuna) &amp; &quot;)&quot;

end Function

function rgbColor(pRed as Integer, pGreen As Integer, pBlue As Integer) as String

	rgbColor = &quot;RGB(&quot; &amp; CStr(pRed) &amp; &quot;,&quot; &amp; CStr(pGreen) &amp;  &quot;,&quot; &amp; CStr(pBlue) &amp; &quot;)&quot;

end function

sub import(pName as String)
		         
	if GlobalScope.BasicLibraries.hasByName(pName) then
	
		if Not GlobalScope.BasicLibraries.isLibraryLoaded(pName) then
	
				GlobalScope.BasicLibraries.loadLibrary(pName)
				
		end if
			
	elseif BasicLibraries.hasByName(pName) then
		
		if Not BasicLibraries.isLibraryLoaded(pName) then
		
			BasicLibraries.loadLibrary(pName)
			
		end if
		
	else
	
		msgbox(&quot;Não foi possível importar a biblioteca&quot;)
		
	end if

end Sub

Function getRGBfromLong(pEntrada As Long) As String
dim b As Integer
dim g As Integer
dim r As Integer
Dim saldo As Long

	saldo = pEntrada

		If saldo / 65536 &gt; 1 Then
			r = ToFloor(saldo / 65536)
			saldo = saldo - 65536*r
		Else
			r = 0 
		End If
		
		If saldo / 256 &gt; 1 Then
			g = ToFloor(saldo / 256)
			saldo = saldo - 256*g 
		Else
			g = 0
		End If
		
		If saldo &gt; 0 then
			b = saldo
		Else
			b = 0
		End if

	 	getRGBfromLong = &quot;RGB(&quot;&amp; Cstr( r ) &amp;&quot;,&quot;&amp; CStr( g ) &amp; &quot;,&quot; &amp; CStr( b ) &amp; &quot;)&quot;

End Function

Private Function GetSystemPathSeparator() As String
    &apos; Heurística simples: URL do perfil usa &quot;/&quot; no mac/linux; no Windows usamos &quot;\&quot;
    If InStr(1, LCase$(Environ(&quot;OS&quot;)), &quot;windows&quot;) &gt; 0 Then
        GetSystemPathSeparator = &quot;\&quot;
    Else
        GetSystemPathSeparator = &quot;/&quot;
    End If
End Function

Private Function JoinPath(folder As String, name As String) As String
    Dim sep As String : sep = GetSystemPathSeparator()
    If Right$(folder,1) = sep Then
        JoinPath = folder &amp; name
    Else
        JoinPath = folder &amp; sep &amp; name
    End If
End Function


Private Function GetUserDocumentsDir() As String
    Dim home As String, isWin As Boolean
    isWin = InStr(1, LCase$(GetSystemPathSeparator()), &quot;\&quot;) &gt; 0

    If isWin Then
        &apos; Windows: %USERPROFILE%\Documents (padrão)
        home = Environ(&quot;USERPROFILE&quot;)
        If Len(home) = 0 Then home = Environ(&quot;HOMEDRIVE&quot;) &amp; Environ(&quot;HOMEPATH&quot;)
        GetUserDocumentsDir = JoinPath(home, &quot;Documents&quot;)
    Else
        &apos; macOS/Linux: $HOME/Documents
        home = Environ(&quot;HOME&quot;)
        If Len(home) = 0 Then home = GetHomeFromProfile()
        GetUserDocumentsDir = JoinPath(home, &quot;Documents&quot;)
    End If
End Function


&apos; Reference: Adaptation from
&apos; https://ask.libreoffice.org/t/lo-calc-basic-macro-how-to-work-with-integers/23049
function ToFloor( v as Double ) as Long
	dim aux as Long
	aux = v
	if aux &gt; v then 
		ToFloor = aux-1
	else 
		ToFloor = aux
	EndIf

end function	

&apos; Reference:  https://wiki.openoffice.org/wiki/Documentation/BASIC_Guide/Strings_(Runtime_Library)
Function Replace(Source As String, Search As String, NewPart As String)
  Dim Result As String  
  Result = join(split(Source, Search), NewPart)
  Replace = Result
End Function

Function getFoundCell as String

	getFoundCell = vFoundCell
	
end function


Sub setFoundCell(pEntrada as String) 

	vFoundCell = pEntrada

end Sub

Sub setFoundRow(pEntrada as Integer) 

	vFoundRow = pEntrada

end Sub

Function getFoundRow as Integer

	getFoundRow = vFoundRow
	
end function

Function getOperType(num1 As Integer, num2 As Integer) As String

dim vOperType As String

	If num1 &lt; num2 Then
 		vOperType = &quot;add&quot;
 	ElseIf num1 &gt; num2 then
 		vOperType = &quot;minus&quot;
 	End if	
 	
 	getOperType = vOperType

End Function

Function NumberTransformation(pNum1 As Integer, pNum2 As Integer, pOperType As String, pInc As Integer) As Integer	

	If pOperType = &quot;add&quot; Then
		if pNum1 &lt; pNum2 Then
			pNum1 = pNum1 + pInc
		Else
			pNum1 = pNum2
		End If
	Else &apos;operType = &quot;minus&quot;
		if pNum1 &gt; pNum2 Then
			pNum1 = pNum1 - pInc
		Else
			pNum1 = pNum2
		End If
	End If
	
	NumberTransformation = pNum1

End Function

Function GetPythonUserScriptsPath As String
    Dim ps As Object
    Dim sPath As String
    
    &apos; Acessa o objeto de configuração de caminho do usuário
    ps = createUnoService(&quot;com.sun.star.util.PathSettings&quot;)
    
    &apos; Obtém o caminho do diretório de usuário e anexa os subdiretórios dos scripts Python
    sPath = ps.UserConfig &amp; &quot;/Scripts/python&quot;
    
    &apos; Exibe o caminho
    GetPythonUserScriptsPath = sPath
End Function


Function SheetExists(ByVal sName As String) As Boolean
    On Error GoTo Nope
    SheetExists = ThisComponent.Sheets.hasByName(sName)
    Exit Function
Nope:
    SheetExists = False
End Function

&apos;Function ValueWhenParameterIsMissing(pEntrada, pDefault, pValue)
&apos;
&apos;	if IsMissing(pEntrada) Then
&apos;		vRetorno = pDefault
&apos;	Else
&apos;		vRetorno = pValue
&apos;	end If
&apos;	
&apos;	ValueWhenParameterIsMissing = vRetorno
&apos;
&apos;End Function




</script:module>